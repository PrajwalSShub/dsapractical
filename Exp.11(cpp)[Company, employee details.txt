#include<iostream>
#include<stdlib.h>
#include<fstream>
#include<string.h>
#include<iomanip>
using namespace std;

class EMP_CLASS {
    typedef struct EMPLOYEE {
        char name[10];
        int emp_id;
        int salary;
    } Rec;

    typedef struct INDEX {
        int emp_id;
        int position;
    } Ind_Rec;

    Rec Records;
    Ind_Rec Ind_Records;

public:
    EMP_CLASS() { strcpy(Records.name, ""); }

    void Create();
    void Display();
    void Delete();
    void Add();
    void Search();
};

void EMP_CLASS::Create() {
    int i = 0;
    char ch = 'y';
    fstream seqfile;
    fstream indexfile;

    indexfile.open("IND.DAT", ios::out | ios::binary);
    seqfile.open("EMP.DAT", ios::out | ios::binary);

    do {
        cout << "\nEnter Name: ";
        cin >> Records.name;
        cout << "\nEnter Emp_ID: ";
        cin >> Records.emp_id;
        cout << "\nEnter Salary: ";
        cin >> Records.salary;
        seqfile.write((char*)&Records, sizeof(Records));

        Ind_Records.emp_id = Records.emp_id;
        Ind_Records.position = i;
        indexfile.write((char*)&Ind_Records, sizeof(Ind_Records));

        i++;
        cout << "\nDo you want to add more records? ";
        cin >> ch;

    } while (ch == 'y');

    seqfile.close();
    indexfile.close();
}

void EMP_CLASS::Display() {
    fstream seqfile;
    fstream indexfile;
    int i;
    seqfile.open("EMP.DAT", ios::in | ios::binary);
    indexfile.open("IND.DAT", ios::in | ios::binary);

    cout << "\nThe Contents of file are...\n";
    while (indexfile.read((char*)&Ind_Records, sizeof(Ind_Records))) {
        seqfile.seekg(Ind_Records.position * sizeof(Records), ios::beg); // Use the position directly
        seqfile.read((char*)&Records, sizeof(Records));

        if (Records.emp_id != -1) { // If record is not logically deleted
            cout << "\nName: " << Records.name;
            cout << "\nEmp_ID: " << Records.emp_id;
            cout << "\nSalary: " << Records.salary;
            cout << "\n";
        }
    }

    seqfile.close();
    indexfile.close();
}

void EMP_CLASS::Delete() {
    int id, pos;
    cout << "\nFor deletion, enter the Emp_ID for searching: ";
    cin >> id;

    fstream seqfile;
    fstream indexfile;
    seqfile.open("EMP.DAT", ios::in | ios::out | ios::binary);
    indexfile.open("IND.DAT", ios::in | ios::out | ios::binary);

    pos = -1;
    while (indexfile.read((char*)&Ind_Records, sizeof(Ind_Records))) {
        if (id == Ind_Records.emp_id) {
            pos = Ind_Records.position;
            Ind_Records.emp_id = -1; // Mark as deleted in index
            break;
        }
    }

    if (pos == -1) {
        cout << "\nThe record is not present in the file.";
        return;
    }

    int offset = pos * sizeof(Records);
    seqfile.seekp(offset, ios::beg); // Seek to the correct record for deletion
    strcpy(Records.name, "");
    Records.emp_id = -1; // Logical deletion
    Records.salary = -1; // Logical deletion
    seqfile.write((char*)&Records, sizeof(Records));

    indexfile.seekp(pos * sizeof(Ind_Rec), ios::beg); // Seek to the correct index record
    Ind_Records.emp_id = -1; // Mark as deleted in index
    Ind_Records.position = pos; // Position remains the same
    indexfile.write((char*)&Ind_Records, sizeof(Ind_Records));

    seqfile.close();
    indexfile.close();
    cout << "\nThe record is Deleted!!!";
}

void EMP_CLASS::Add() {
    fstream seqfile;
    fstream indexfile;
    int pos;

    indexfile.open("IND.DAT", ios::in | ios::binary);
    indexfile.seekg(0, ios::end);
    pos = indexfile.tellg() / sizeof(Ind_Records);
    indexfile.close();

    indexfile.open("IND.DAT", ios::app | ios::binary);
    seqfile.open("EMP.DAT", ios::app | ios::binary);

    cout << "\nEnter the record for appending";
    cout << "\nName: "; cin >> Records.name;
    cout << "\nEmp_ID: "; cin >> Records.emp_id;
    cout << "\nSalary: "; cin >> Records.salary;

    seqfile.write((char*)&Records, sizeof(Records));
    Ind_Records.emp_id = Records.emp_id;
    Ind_Records.position = pos;
    indexfile.write((char*)&Ind_Records, sizeof(Ind_Records));

    seqfile.close();
    indexfile.close();

    cout << "\nThe record is Appended!!!";
}

void EMP_CLASS::Search() {
    fstream seqfile;
    fstream indexfile;
    int id, pos, offset;

    cout << "\nEnter the Emp_ID for searching the record: ";
    cin >> id;

    indexfile.open("IND.DAT", ios::in | ios::binary);
    pos = -1;

    while (indexfile.read((char*)&Ind_Records, sizeof(Ind_Records))) {
        if (id == Ind_Records.emp_id) {
            pos = Ind_Records.position;
            break;
        }
    }

    if (pos == -1) {
        cout << "\nRecord is not present in the file";
        return;
    }

    offset = pos * sizeof(Records);
    seqfile.open("EMP.DAT", ios::in | ios::binary);
    seqfile.seekg(offset, ios::beg);
    seqfile.read((char*)&Records, sizeof(Records));

    if (Records.emp_id == -1) {
        cout << "\nRecord is not present in the file";
    } else {
        cout << "\nThe Record is present in the file and it is...";
        cout << "\nName: " << Records.name;
        cout << "\nEmp_ID: " << Records.emp_id;
        cout << "\nSalary: " << Records.salary;
    }

    seqfile.close();
    indexfile.close();
}

int main() {
    EMP_CLASS List;
    char ans = 'y';
    int choice;

    do {
        cout << "\n             Main Menu             " << endl;
        cout << "\n 1.Create";
        cout << "\n 2.Display";
        cout << "\n 3.Delete";
        cout << "\n 4.Add";
        cout << "\n 5.Search";
        cout << "\n 6.Exit";
        cout << "\n Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1: List.Create(); break;
            case 2: List.Display(); break;
            case 3: List.Delete(); break;
            case 4: List.Add(); break;
            case 5: List.Search(); break;
            case 6: exit(0); break;
            default: cout << "Invalid choice!" << endl;
        }

        cout << "\n\t Do you want to go back to Main Menu? ";
        cin >> ans;
    } while (ans == 'y');

    return 0;
}
