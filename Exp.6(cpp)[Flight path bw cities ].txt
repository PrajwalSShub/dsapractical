#include<iostream>
#include<stdlib.h>
#include<string.h>
#include<vector>
#include<queue>
using namespace std;

struct node {
    string vertex;
    int time;
    node *next;
};

class adjmatlist {
private:
    int m[20][20], n;
    string v[20];
    node *head[20];

public:
    adjmatlist() {
        for (int i = 0; i < 20; i++) {
            head[i] = NULL;
            for (int j = 0; j < 20; j++) {
                m[i][j] = 0;
            }
        }
    }

    void getgraph();
    void adjlist();
    void displaym();
    void displaya();
    void checkConnectivity();
};

void adjmatlist::getgraph() {
    cout << "\nEnter number of cities (max. 20): ";
    cin >> n;
    cout << "\nEnter name of cities:\n";
    for (int i = 0; i < n; i++)
        cin >> v[i];

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            char ch;
            cout << "\nIs there a flight from " << v[i] << " to " << v[j] << "? (y/n): ";
            cin >> ch;
            if (ch == 'y' || ch == 'Y') {
                cout << "Enter time required (in minutes): ";
                cin >> m[i][j];
            } else if (ch == 'n' || ch == 'N') {
                m[i][j] = 0;
            } else {
                cout << "\nUnknown entry. Assuming no path.";
                m[i][j] = 0;
            }
        }
    }
    adjlist();
}

void adjmatlist::adjlist() {
    // Create head nodes
    for (int i = 0; i < n; i++) {
        node *p = new node;
        p->vertex = v[i];
        p->next = NULL;
        head[i] = p;
    }

    // Build adjacency list
    for (int i = 0; i < n; i++) {
        node *last = head[i];
        for (int j = 0; j < n; j++) {
            if (m[i][j] != 0) {
                node *p = new node;
                p->vertex = v[j];
                p->time = m[i][j];
                p->next = NULL;
                last->next = p;
                last = p;
            }
        }
    }
}

void adjmatlist::displaym() {
    cout << "\nAdjacency Matrix:\n\t";
    for (int j = 0; j < n; j++) {
        cout << v[j] << "\t";
    }
    cout << "\n";

    for (int i = 0; i < n; i++) {
        cout << v[i] << "\t";
        for (int j = 0; j < n; j++) {
            cout << m[i][j] << "\t";
        }
        cout << "\n";
    }
}

void adjmatlist::displaya() {
    cout << "\nAdjacency List:";
    for (int i = 0; i < n; i++) {
        node *temp = head[i];
        cout << "\n" << temp->vertex;
        temp = temp->next;
        while (temp != NULL) {
            cout << " -> " << temp->vertex;
            temp = temp->next;
        }
    }

    cout << "\n\nPath and time required to reach cities:";
    for (int i = 0; i < n; i++) {
        node *temp = head[i]->next;
        while (temp != NULL) {
            cout << "\n" << head[i]->vertex << " -> " << temp->vertex 
                 << "  [time required: " << temp->time << " min]";
            temp = temp->next;
        }
    }
    cout << "\n";
}

void adjmatlist::checkConnectivity() {
    vector<bool> visited(n, false);
    queue<int> q;
    q.push(0);
    visited[0] = true;

    while (!q.empty()) {
        int curr = q.front(); q.pop();

        for (int j = 0; j < n; j++) {
            if (m[curr][j] != 0 && !visited[j]) {
                visited[j] = true;
                q.push(j);
            }
        }
    }

    // Check if all nodes were visited
    bool connected = true;
    for (int i = 0; i < n; i++) {
        if (!visited[i]) {
            connected = false;
            break;
        }
    }

    if (connected)
        cout << "\nThe graph is CONNECTED. All cities are reachable.\n";
    else
        cout << "\nThe graph is NOT connected. Some cities are not reachable from others.\n";
}

int main() {
    int m;
    adjmatlist a;

    while (1) {
        cout << "\n\nEnter your choice";
        cout << "\n1. Enter graph";
        cout << "\n2. Display adjacency matrix for cities";
        cout << "\n3. Display adjacency list for cities";
        cout << "\n4. Check if graph is connected";
        cout << "\n5. Exit\n";
        cin >> m;

        switch (m) {
            case 1: a.getgraph();
                    break;
            case 2: a.displaym();
                    break;
            case 3: a.displaya();
                    break;
            case 4: a.checkConnectivity();
                    break;
            case 5: exit(0);
            default: cout << "\nUnknown choice";
        }
    }
    return 0;
}
