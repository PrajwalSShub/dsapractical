#include <stdio.h>
#include <iostream>
#define max 20
#define inf 999

using namespace std;

int i, j, k, n, min, r[max][max];
float p[max], q[max], w[max][max], c[max][max];

void OBST();
void print(int, int);
void print_tab();

int main()
{
    cout << "\nEnter number of nodes: ";
    cin >> n;
    
    cout << "\nEnter successful search probabilities: ";
    for (i = 1; i <= n; i++)
    {
        cin >> p[i];
    }
    
    cout << "\nEnter unsuccessful search probabilities: ";
    for (i = 0; i <= n; i++)
    {
        cin >> q[i];
    }

    OBST();
    print_tab();

    return 0;
}

void OBST()
{
    int x;

    // Calculate values for first row
    for (i = 0; i <= n; i++) 
    {    
        // for row j-i=0
        r[i][i] = 0;
        c[i][i] = 0;
        w[i][i] = q[i];
    }

    // Calculate values for second row
    for (i = 0; i < n; i++) 
    {
        j = i + 1;
        w[i][j] = w[i][i] + p[j] + q[j];
        c[i][j] = w[i][j];
        r[i][j] = j;
    }

    // Calculate values for third row onwards
    for (j = 2; j <= n; j++)  
    {
        for (i = 0; i <= n - j; i++) 
        {    
            x = i + j;
            w[i][x] = w[i][x - 1] + p[x] + q[x];
            c[i][x] = inf;
            for (k = i + 1; k <= x; k++)  
            {
                if (c[i][x] > c[i][k - 1] + c[k][x])
                {
                    c[i][x] = c[i][k - 1] + c[k][x];
                    r[i][x] = k;
                }
            }
            c[i][x] = c[i][x] + w[i][x];
        }
    }
}

void print_tab()
{
    cout << endl << "---- OBST TABLE ----" << endl;
    
    for (k = 0; k <= n; k++) // Print rows from 0 to n
    {
        // Print weight (w[i][j])
        for (i = 0; i <= n - k; i++) // Adjusted loop range to print correct matrix
        {
            j = i + k;
            cout << "w" << i << j << "=" << w[i][j] << "\t";
        }
        cout << endl;
        
        // Print cost (c[i][j])
        for (i = 0; i <= n - k; i++) // Adjusted loop range to print correct matrix
        {
            j = i + k;
            cout << "c" << i << j << "=" << c[i][j] << "\t";
        }
        cout << endl;
        
        // Print root (r[i][j])
        for (i = 0; i <= n - k; i++) // Adjusted loop range to print correct matrix
        {
            j = i + k;
            cout << "r" << i << j << "=" << r[i][j] << "\t";
        }
        cout << endl << endl;
    }
}
